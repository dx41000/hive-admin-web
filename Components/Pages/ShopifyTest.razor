@page "/shopifyTest/{productVariantId}"
@using hive_admin_web.Models
@using hive_admin_web.Models.AppSettings
@using hive_admin_web.Models.JS
@using hive_admin_web.Services.Interfaces
@using Newtonsoft.Json
@inject IJSRuntime JS
@inject Config config
@inject IProductariantViewService ProductariantViewService;
@inject NavigationManager Navigation
@inject AppState AppState

<style>

  /*ShopfiyTest*/
  /*.container {*/
  /*  display: flex;*/
  /*  width: 100%;*/
  /*}*/
  
  /*.left-container {*/
  /*  position: relative;*/
  /*  padding-bottom: 56.25%;*/
  /*  height: 0;*/
  /*  overflow: hidden;*/
  /*  max-width: 800px;*/
  /*  width: 800px;*/
  /*}*/
  
  .right-container {
    flex: 1;
    text-align: left;
    padding-left: 20px;
  }
  
  /*iframe {*/
  /*  position: absolute;*/
  /*  top: 0;*/
  /*  left: 0;*/
  /*  max-width: 800px;*/
  /*  width: 800px;*/
  /*  height: 100%;*/
  /*}*/

  .container {
    display: flex;
    width: 100%;
  }

  .left-container {
    flex: 1;
    position: relative;
  }

  iframe {
    width: 100%;
    height: 100%;
    border: none;
  }
  
</style>

<h1>Shopify Test Page</h1>
<br/>
<br/>
<div class="container">
  <div class="left-container">
    <iframe id="myIframe" src="@currentUrl" frameborder="1"></iframe>
  </div>
  <div class="right-container">


    <MudButton @onclick="ShowNextView" Variant="Variant.Filled" Color="Color.Primary">
      Show Next View
    </MudButton>
    <br/><br/>
    <MudButton @onclick="GetProductAndPrintOrderData" Variant="Variant.Filled" Color="Color.Primary">
      Save View
    </MudButton>
    <br/><br/>
    <MudButton @onclick="CreatePrintFile" Variant="Variant.Filled" Color="Color.Primary">
      Create Print File
    </MudButton>
    
    <br/><br/>
    <label>View Name: @viewName</label>
    <div id="elements">
    </div>
  </div>
</div>

@code {
  [Parameter] public string ProductVariantId { get; set; }
  private int _currentView;
  //private Guid myIframe = Guid.NewGuid();
  private DotNetObjectReference<ShopifyTest>? dotNetRef;
  //private bool _firstRender = true;
  private string currentUrl = string.Empty;
  private string viewName = string.Empty;
  
  protected override async Task OnInitializedAsync()
  {
    dotNetRef = DotNetObjectReference.Create(this);
    await JS.InvokeVoidAsync("setupDotNetRef", dotNetRef);
    _currentView = 0;
    await InitaliseDesigner();
    await GetProductVariantViewsFromDb();
    await ShowProduct();
  }

  private async Task ShowNextView()
  {
    if (_currentView >= AppState.TestProductVariantViews.Count-1)
    {
      _currentView = 0;
    }
    else
    {
      _currentView++;
    }

    await ShowProduct();
  }

  private async Task SaveDesign()
  {
    await JS.InvokeVoidAsync("postToIframe", "saveDesign", null);
  }

  private async Task InitaliseDesigner()
  {
    await JS.InvokeVoidAsync("initializePostMessageHandler");
  }

  private async Task GetProductVariantViewsFromDb()
  {
    var response = await ProductariantViewService.GetAllProductVariantViewsByIdAsync(long.Parse(ProductVariantId));
    var json = response.Data.Payload.ToString();
    AppState.TestProductVariantViews = JsonConvert.DeserializeObject<List<ProductVariantView>>(json);
  }

  private async Task ShowProduct()
  {
    viewName = AppState.TestProductVariantViews[_currentView].Name;
    var uri = new Uri(Navigation.Uri);
    currentUrl = "singleview.html?viewUrl=" + Uri.EscapeDataString( $"{uri.Scheme}://{uri.Host}:{uri.Port}/api/views/{AppState.TestProductVariantViews[_currentView].Id}");

    var height = AppState.TestProductVariantViews[_currentView].AssetVariantView.CanvasHeight;
    var width = AppState.TestProductVariantViews[_currentView].AssetVariantView.CanvasWidth;
    
    await JS.InvokeVoidAsync("resizeIframe", "myIframe", width, height); // Example dimensions

  }

  private async Task GetProductAndPrintOrderData()
  {
    await JS.InvokeVoidAsync("postToIframe", "getProductAndPrintOrderData",null);
  }
  
  private async Task CreatePrintFile()
  {
    await JS.InvokeVoidAsync("postToIframe", "createPrintFile",null);
  }
  
  [JSInvokable]
  public async Task ReturnProductAndPrintOrderData(string json)
  {
    var payload = JsonConvert.DeserializeObject<DesignerPayload>(json);
    AppState.TestProductVariantViews[_currentView].DesignerJson = designerTemplae.Replace("**product**", payload.product);
    AppState.TestProductVariantViews[_currentView].PrintOrder = payload.printOrderData;
  }

  string designerTemplae = @"[
  {
    ""category"": ""Product Category One"",
    ""products"": [
      **product**
    ]
  }
]";
  
}
