@page "/shopifyTest/{productVariantId}"
@using hive_admin_web.Components.Dialog
@using hive_admin_web.Models
@using hive_admin_web.Models.AppSettings
@using hive_admin_web.Models.Enum
@using hive_admin_web.Models.JS
@using hive_admin_web.Models.PrintReady
@using hive_admin_web.Services.Interfaces
@using Newtonsoft.Json
@inject IJSRuntime JS
@inject Config config
@inject IProductariantViewService ProductariantViewService;
@inject NavigationManager Navigation
@inject AppState AppState
@inject IDialogService DialogService

<style>

  .right-container {
    flex: 1;
    text-align: left;
    padding-left: 20px;
  }

  .container {
    display: flex;
    width: 100%;
  }

  .left-container {
    flex: 1;
    position: relative;
  }

  iframe {
    width: 100%;
    height: 100%;
    border: none;
  }




  .button-container {
    display: flex;
    justify-content: space-between; /* This makes the buttons go to the far left and right */
    padding: 10px;
  }

  .button {
    padding: 10px 20px;
    cursor: pointer;
    font-size: 16px;
  }


</style>

<MudOverlay Visible="overlayVisible" DarkBackground="true" Absolute="true">
  <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<h1>Shopify Test Page</h1>
<br/>
<br/>
<div class="container">
  <div class="left-container">
    <iframe id="myIframe" src="@currentUrl" frameborder="1"></iframe>
  </div>
  <div class="right-container">
    <MudButton @onclick="ShowNextView" Variant="Variant.Filled" Color="Color.Primary">
      Show Next View
    </MudButton>
    <br/>
    <br/>
    <MudButton @onclick="CreatePrintFile" Variant="Variant.Filled" Color="Color.Primary">
      Create Print File
    </MudButton>
    
    <br/><br/>
    <label>View Name: @viewName</label>
    <div id="elements">
    </div>
  </div>
</div>

@code {
  [Parameter] public string ProductVariantId { get; set; }
  private int _currentView;
  //private Guid myIframe = Guid.NewGuid();
  private DotNetObjectReference<ShopifyTest>? dotNetRef;
  //private bool _firstRender = true;
  private string currentUrl = string.Empty;
  private string viewName = string.Empty;
  private bool overlayVisible;
  private bool _isLoading;
  
  protected override async Task OnInitializedAsync()
  {
    dotNetRef = DotNetObjectReference.Create(this);
    await JS.InvokeVoidAsync("setupDotNetRef", dotNetRef);
    _currentView = 0;
    await InitaliseDesigner();
    await GetProductVariantViewsFromDb();
    await ShowProduct();
  }

  private async Task ShowNextView()
  {
    if (_currentView >= AppState.TestProductVariantViews.Count-1)
    {
      _currentView = 0;
    }
    else
    {
      _currentView++;
    }

    await ShowProduct();
  }

  private async Task InitaliseDesigner()
  {
    await JS.InvokeVoidAsync("initializePostMessageHandler");
  }

  private async Task GetProductVariantViewsFromDb()
  {
    var response = await ProductariantViewService.GetAllProductVariantViewsByIdAsync(long.Parse(ProductVariantId));
    var json = response.Data.Payload.ToString();
    AppState.TestProductVariantViews = JsonConvert.DeserializeObject<List<ProductVariantView>>(json);
  }

  private async Task ShowProduct()
  {
    viewName = AppState.TestProductVariantViews[_currentView].Name;
    var uri = new Uri(Navigation.Uri);
    currentUrl = "singleview.html?viewUrl=" + Uri.EscapeDataString($"{uri.Scheme}://{uri.Host}:{uri.Port}/api/views/{AppState.TestProductVariantViews[_currentView].Id}");

    var height = AppState.TestProductVariantViews[_currentView].AssetVariantView.CanvasHeight;
    var width = AppState.TestProductVariantViews[_currentView].AssetVariantView.CanvasWidth;

    await JS.InvokeVoidAsync("resizeIframe", "myIframe", width, height); // Example dimensions
  }

  private async Task GetProductAndPrintOrderData()
  {
    await JS.InvokeVoidAsync("postToIframe", "getProductAndPrintOrderData",null);
  }
  
  private async Task CreatePrintFile()
  {
    _isLoading = true;
    overlayVisible = true;
    var request = new GenerateImageRequest
    {
      ProductVariantId = long.Parse(ProductVariantId),
      ProductType = (int)ProductType.POD
    };

    foreach (var testProductVariantViews in AppState.TestProductVariantViews)
    {
      request.GenerateImages.Add(new GenerateImage
      {
        ProductVariantViewId = (long)testProductVariantViews.Id,
        PrintOrder = testProductVariantViews.PrintOrder
      });
    }
    
    var response = await ProductariantViewService.GetPrintFile(request);
    
    var json = response.Data.Payload.ToString();
    var generateImageResponse = JsonConvert.DeserializeObject<GenerateImageResponse>(json);
    
    if (generateImageResponse?.PrintFile != null)
    {
      // Convert the response byte[] to a file download
      var fileBytes = generateImageResponse.PrintFile; // Assuming the response has a byte[] called FileBytes
      var fileName = "PrintFile-"+ DateTime.UtcNow.ToString("yyyyMMddhhmmss") +".pdf"; // Change the file extension/type as per your requirement
        
      // Trigger the download using JS interop
      await JSRuntimeExtensions.InvokeVoidAsync(JS, "downloadFile", fileName, fileBytes).ConfigureAwait(false);

      //OpenImageDialog(fileBytes);
      
      _isLoading = false;
      overlayVisible = false;
    }
  }
  
  [JSInvokable]
  public async Task ReturnProductAndPrintOrderData(string json)
  {
    var payload = JsonConvert.DeserializeObject<DesignerPayload>(json);
    AppState.TestProductVariantViews[_currentView].DesignerJson = designerTemplae.Replace("**product**", payload.product);
    AppState.TestProductVariantViews[_currentView].PrintOrder = payload.printOrderData;
  }

  string designerTemplae = @"[
  {
    ""category"": ""Product Category One"",
    ""products"": [
      **product**
    ]
  }
]";
  
  private void OpenImageDialog(byte[] pdfBytes)
  {
    var parameters = new DialogParameters();
    parameters.Add("PdfBytes", pdfBytes);
    var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    DialogService.Show<PdfDialog>(null, parameters, options);
  }

  private bool allDesignerJsonSet()
  {
    return AppState.TestProductVariantViews.All(view => view.PrintOrder != null);
  }

}
