@page "/assets"
@using hive_admin_web.Components.Dialog
@using hive_admin_web.Models
@using hive_admin_web.Services
@using hive_admin_web.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using CreateAsset = hive_admin_web.Components.Dialog.CreateAsset
@using CreateProduct = hive_admin_web.Components.Dialog.CreateProductDraft
@inject IDialogService DialogService
@inject IAssetService AssetService;
@attribute [Authorize]

<PageTitle>Assets</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Assets</MudText>
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudTable ServerData="ServerReload"  Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_isLoading" LoadingProgressColor="Color.Info"  @ref="_table" >
  <ToolBarContent>
    <MudText Typo="Typo.h6">Asset Variants</MudText>
    <MudSpacer />
    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
  </ToolBarContent>
  <HeaderContent>
    <MudTh>
      <MudTableSortLabel  SortLabel="Id" T="Asset">
        Id
      </MudTableSortLabel>
    </MudTh>
    <MudTh>
      <MudTableSortLabel SortLabel="Name" T="Asset">
        Name
      </MudTableSortLabel>
    </MudTh>
    <MudTh>
      <MudTableSortLabel SortLabel="HsCode" T="Asset">
        HsCode
      </MudTableSortLabel>
    </MudTh>
    <MudTh>
      <MudTableSortLabel SortLabel="ProductType" T="Asset">
        Asset Type
      </MudTableSortLabel>
    </MudTh>
    <MudTh>

    </MudTh>
    <MudTh>

    </MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd><a href="assetvariants/@context.Id">@context.Id</a></MudTd>
    <MudTd><a href="assetvariants/@context.Id">@context.Name</a></MudTd>
    <MudTd>@context.HsCode</MudTd>
    <MudTd>@(context.ProductType == 1 ? "Pod" : "All Over")</MudTd>
    <MudTd>
      <MudButton @onclick="() => CreateAsset(context.Id)" Variant="Variant.Filled" Color="Color.Primary">
        Create Product
      </MudButton>
    </MudTd>
    <MudTd>
      <MudButton @onclick="() => DeleteAsset(context.Id ?? -1)" Variant="Variant.Filled" Color="Color.Primary">
        Delete
      </MudButton>
    </MudTd>
  </RowTemplate>
  <PagerContent>
    <MudTablePager />
  </PagerContent>
</MudTable>
<br/>
<MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
  Add Asset
</MudButton>
@code {

  private bool _isLoading;
  private string _searchString = "";
  private MudTable<Asset> _table;
  private long selectAssetId;

  private List<BreadcrumbItem> _items =
  [
    new("Assets", href: "assets")
  ];

  private async Task OpenDialogAsync()
  {
    var options = new DialogOptions
    {
      Position = DialogPosition.Center,
      BackdropClick = true,
      CloseOnEscapeKey = true,
      NoHeader = false,
      CloseButton = true,
      FullWidth = true,
      MaxWidth = MaxWidth.Small
    };

    //return DialogService.ShowAsync<CreateProduct>("Create Product", options);
    var result = await (await DialogService.ShowAsync<CreateAsset>("Create Product", options)).Result;
    var returnedValue = result.Data as string ?? string.Empty;
    await _table.ReloadServerData();
  }

  private async Task OpenErrorDialogAsync(string message)
  {
    var parameters = new DialogParameters
    {
      { "Title", "Error" },
      { "MainText", message },
      { "OnOK", EventCallback.Factory.Create(this, OkAction) },
    };

    var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
    await DialogService.ShowAsync<ErrorDialog>("", parameters, options);
  }

  private async Task YesActionDeleteAsset()
  {
    Console.WriteLine("Yes clicked : " + selectAssetId);
    await AssetService.DeleteAssetByIdAsync(selectAssetId);
    await _table.ReloadServerData();
  }

  private Task NoAction()
  {
    Console.WriteLine("No clicked");
    return Task.CompletedTask;
  }

  private Task OkAction()
  {
    return Task.CompletedTask;
  }

  
  private async Task DeleteAsset(long assetId)
  {
    selectAssetId = assetId;
    var parameters = new DialogParameters
    {
      { "Title", "Delete Asset?" },
      { "MainText", "Are you sure you want to delete this item?" },
      { "OnYes", EventCallback.Factory.Create(this, YesActionDeleteAsset) },
      { "OnNo", EventCallback.Factory.Create(this, NoAction) }
    };

    var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
    await DialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
  }


  private async Task CreateAsset(long? assetId)
  {
    var parameters = new DialogParameters<CreateProduct>()
    {
      { x => x.AssetId, assetId }
    };

    var options = new DialogOptions
    {
      Position = DialogPosition.Center,
      BackdropClick = true,
      CloseOnEscapeKey = true,
      NoHeader = false,
      CloseButton = true,
      FullWidth = true,
      MaxWidth = MaxWidth.Small
    };

    //return DialogService.ShowAsync<CreateProduct>("Create Product", options);
    var result = await (await DialogService.ShowAsync<CreateProduct>("Create Asset", parameters,  options)).Result;
    var returnedValue = result.Data as string ?? string.Empty;
    
    await _table.ReloadServerData();
  }


  private async Task<TableData<Asset>> ServerReload(TableState state, CancellationToken token)
  {
    _isLoading = true;
    var response = await AssetService.GetAllAssetsAsync( state.Page + 1, state.PageSize, _searchString, state.SortLabel, 
      state.SortDirection switch
    {
      SortDirection.None => "asc",
      SortDirection.Ascending => "asc",
      SortDirection.Descending => "desc",
      _ => "asc"
    });

    if (!response.Success)
    {
      await OpenErrorDialogAsync(response.Data.Message);
      _isLoading = false;
      return new TableData<Asset>() { TotalItems = response.Pagination.Total, Items = new List<Asset>() };
    }
    else
    {
      var json = response.Data.Payload.ToString();
      var pagedData = JsonConvert.DeserializeObject<List<Asset>>(json);
      _isLoading = false;
      return new TableData<Asset>() { TotalItems = response.Pagination.Total, Items = pagedData };
    }
  }

  private void OnSearch(string text)
  {
    _searchString = text;
    _table.ReloadServerData();
  }
}
